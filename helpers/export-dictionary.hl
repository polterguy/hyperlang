
/*
 * Creates a backup of entire dictionary and downloads it to client.
 *
 * Connects to database, creates one Hyperlambda file for each command,
 * zips all resulting files, and download the zip file to the client.
 *
 * Notice, we order ascendingly by the id of the command, since that way we're
 * certain of that we'll get no parent relationships in the wrong order.
 * In addition to making sure the filenames, when sorted alphabetically, are
 * sorted such that the lower ID comes before anything with a higher ID.
 */





/* 
 * Emptying temporary folder first, and make sure it exists.
 */
if
  fetch:x:/0/0?value
    folder-exists:~/temp/hyperlang/
  not
  create-folder:~/temp/hyperlang/





/*
 * Making sure temp folder is empty.
 */
list-files:~/temp/hyperlang/
delete-file:x:/-/*?name





/*
 * Connecting to database and selects all commands.
 */
p5.mysql.connect:[hyperlang]
  p5.mysql.select:@"select * from commands order by id"

  /*
   * Loops through each command.
   */
  for-each:x:/@p5.mysql.select/*

    /*
     * Checking if currently iterated command has a parent.
     */
    if:x:/@_dp/#/*/parent?value

      /*
       * Making sure we associate currently iterated command with its parent.
       */
      p5.mysql.scalar:@"select global_id from commands where id = @id"
        @id:x:/@_dp/#/*/parent?value
      eval-x:x:/+/*/*
      add:x:/..for-each/*/.command/*/command
        src
          parent:x:/@p5.mysql.scalar?value

    /*
     * Checking if currently iterated command has a username.
     */
    if:x:/@_dp/#/*/username?value

      /*
       * Making sure we associate currently iterated command with its username.
       */
      add:x:/..for-each/*/.command/*/command
        src
          username:x:/@_dp/#/*/username?value

    /*
     * Temporary lambda for command object.
     */
    eval-x:x:/+/*/*
    .command
      command
        hyperlambda:x:/@_dp/#/*/hyperlambda?value
        global:x:/@_dp/#/*/global?value
        global-id:x:/@_dp/#/*/global_id?value

    /*
     * Selecting all phrases for currently iterated command, and adding each
     * phrases to above buffer.
     */
    p5.mysql.select:@"select * from phrases where commandid = @id"
      @id:x:/@_dp/#/*/id?value
    for-each:x:/@p5.mysql.select/*
      eval-x:x:/+/*/*
      .phrase
        phrase
          command:x:/@_dp/#/*/command?value
          lang:x:/@_dp/#/*/lang?value
      add:x:/@.command/*
        src:x:/@.phrase/*

    /*
     * Transforming lambda to Hyperlambda, and saving to temporary file.
     *
     * Notice, since [list-files] will sort files alphabetically, it is important
     * that we are able to create files, such that the files with the lowest IDs
     * turns up alphabetically before files with a higher database ID, since this
     * ensures that all command objects will be later inserted, such that the 
     * command with the lowest database ID is inserted first.
     *
     * This is important since a command might contain a "parent" relationship, 
     * at which point, obviously the parent has been created first, and has a
     * lower database ID.
     *
     * Byt making files sort alphabetically, we avoid later the possibility of
     * importing files, such that the "parent" command is inserted after 
     * the "child" command, which obviously would have created an exception.
     */
    lambda2hyper:x:/@.command/*
    save-file:"~/temp/hyperlang/command-{0:000000000000}.hl"
      :x:/@_dp/#/*/id?value
      src:x:/@lambda2hyper?value





/*
 * Zipping entire folder, and downloading to client.
 */
if
  fetch:x:/0/0?value
    file-exists:~/temp/hyperlang-backup.zip
  delete-file:~/temp/hyperlang-backup.zip
zip:~/temp/hyperlang-backup.zip
  src:~/temp/hyperlang/
micro.download.file:~/temp/hyperlang-backup.zip
  Content-Type:application/zip
  Content-Disposition:@"attachment; filename=""hyperlang-backup.zip"""
