
/*
 * File responsible for databinding phrases grid.
 *
 * Optionally pass in [filter] to only show items containing specified filter,
 * and/or [offset], to list items from a specific offset.
 *
 * You can also pass in [keep-items], at which the old items in your grid will
 * be kept, and the databind operation will "append" the databound items to 
 * your grid instead.
 */





/*
 * Defaults, if no arguments have been supplied.
 */
.defaults
  offset:long:0





/*
 * Checking for arguments.
 */
micro.lambda.contract.optional:x:/..
  filter
  offset:long
  keep-items:bool





/*
 * Dynamically building our SQL, according to filter conditionins.
 */
_sql:@"select p.id, p.command, p.lang, p.commandid, p.lastused, c.id as cid, c.parent, c.username, c.global, c.global_id as global_id from 
  phrases p join commands c on c.id = p.commandid
  where (p.id in (select min(id) from phrases p2 where (p2.lang = @lang or p2.lang = @sublang) {{filter}} group by p2.commandid)
  {{filter2}}) "





/*
 * Checking if a filter condition was supplied.
 */
if:x:/../*/filter?value

  /*
   * Checking that filter doesn't try to do an SQL injection.
   */
  if
    fetch:x:/0/0?name
      match:x:/../*/filter?value
        src:regex:/\{\{filter/
    throw:Illegal filter condition

  /*
   * Caller supplied a [filter].
   */
  set:x:/@_sql?value
    replace:x:/@_sql?value
      src:{{filter}}
      dest:"and p2.command like @filter"
  set:x:/@_sql?value
    replace:x:/@_sql?value
      src:{{filter2}}
      dest:"or ((c.hyperlambda like @filter or c.global_id like @filter) and p.id in (select min(id) from phrases p3 where (p3.lang = @lang or p3.lang = @sublang) group by p3.commandid))"

else

  /*
   * No [filter] was supplied.
   */
  set:x:/@_sql?value
    replace:x:/@_sql?value
      src:{{filter}}
  set:x:/@_sql?value
    replace:x:/@_sql?value
      src:{{filter2}}





/*
 * Adding "tail" to SQL.
 *
 * Notice, we show "Global" commands first.
 */
set:x:/@_sql?value
  src:"{0} order by global desc, global_id, id limit 50 offset @offset"
    :x:/@_sql?value





/*
 * Retrieving language for user, such that we can parametrize SQL.
 */
magic-menu.settings.get-language





/*
 * Connecting to database, and selecting records according to filter condition.
 */
p5.mysql.connect:[magic-menu]
  p5.mysql.select:x:/@_sql?value
    @lang:x:/@magic-menu.settings.get-language/*/lang?value
    @sublang:x:/@magic-menu.settings.get-language/*/sublang?value
    @filter:%{0}%
      :x:/../*/filter?value
    @offset:x:(/../*/offset|/../*/.defaults/*/offset)/$?value

  /*
   * Checking if above SQL yields less than 50 results, and if so, making sure 
   * we stop the scroller.
   */
  if:x:/@p5.mysql.select/*?count
    <:int:50
    p5.web.send-javascript:"p5.hyperlang_end_of_dataset = true;"
  else
    p5.web.send-javascript:"delete p5.hyperlang_end_of_dataset;"

  /*
   * Looping through each result from above SQL, and creating one datagrid row
   * for each result.
   */
  for-each:x:/@p5.mysql.select/*

    /*
     * Retrieving parent.
     */
    _parent
    if:x:/@_dp/#/*/parent?value
      p5.mysql.scalar:@"select command from phrases 
where id in (select min(id) from phrases where (lang = @lang or lang = @sublang) and commandid = @id group by commandid)"
        @lang:x:/@magic-menu.settings.get-language/*/lang?value
        @sublang:x:/@magic-menu.settings.get-language/*/sublang?value
        @id:x:/@_dp/#/*/parent?value
      set:x:/@_parent?value
        src:x:/@p5.mysql.scalar?value

    /*
     * Adding "Global" checkmark, if any.
     */
    if:x:/@_dp/#/*/global?value.int
      =:int:1
      add:x:/..for-each/**/Global
        src
          widgets
            literal
              element:span
              class:icon-checkmark

    /*
     * Adding row to databind operation below.
     */
    eval-x:x:/+/*/*/*(/Command|/Parent|/Global ID|/Username)|/+/*/*/*/*/.id
    add:x:/../*/micro.widgets.grid.databind
      src
        item
          .row
            class:grid-row
            .id:x:/@_dp/#/*/id?value
            onclick

              /*
               * Figuring out item's database id, and evaluating file responsible for editing item.
               */
              get-widget-property:x:/../*/_event?value
                .id
              eval-x:x:/+/*
              micro.evaluate.file:@MAGIC/helpers/edit-phrase.hl
                id:x:/@get-widget-property/*/*?value.long

          Command:x:/@_dp/#/*/command?value
          Parent:x:/@_parent?value
          Global ID:x:/@_dp/#/*/global_id?value
          Username:x:/@_dp/#/*/username?value
          Global





/*
 * Databinding datagrid, making sure we support "adding items" to it, to
 * support "never ending scrolling" to feed the grid.
 */
eval-x:x:/+/*
micro.widgets.grid.databind:magic-menu-phrases-grid
  keep-items:x:/../*/keep-items?value





/*
 * Updating "offset".
 */
+:x:(/../*/offset|/../*/.defaults/*/offset)/$?value
  _:50
p5.web.viewstate.set:magic-menu.grid-offset
  src:x:/@+?value
