

/*
 * File responsible for handling upload requests.
 *
 * Requires user is logged in as root.
 */





/*
 * Verifying user is logged in as root, and if not, 
 * returning error to client.
 */
whoami
if:x:/@whoami/*/role?value
  !=:root

  /*
   * User is not root.
   */
  p5.web.echo:ERROR
  return





/*
 * User is allowed to upload files to server.
 *
 * Checking if temp folder for module exists, and if not, creating it.
 */
if
  fetch:x:/0/0?value
    folder-exists:~/temp/hyperlang/
  not

  /*
   * Creating Hyperlang temp folder.
   */
  create-folder:~/temp/hyperlang/

else

  /*
   * Hyperlang "temp" folder already exists, making sure we empty it.
   */
  list-files:~/temp/hyperlang/
  delete-file:x:/@list-files/*?name
  list-folder:~/temp/hyperlang/
  delete-folder:x:/@list-folder/*?name





/*
 * Opening a database connection, and creating a database transaction, to avoid
 * importing "partial files".
 */
p5.mysql.connect:[hyperlang]
  p5.mysql.transaction.begin

    /*
     * Parsing MIME request, and checking which type of file we were given.
     *
     * Candidates are ".hl" and ".zip".
     * A zip file is considered a "backup", but will still be "appended" to existing
     * database. A .hl file (Hyperlambda) is considered a single command entry, and
     * will also be added to existing dictionary.
     */
    p5.web.request.parse-mime
      attachment-folder:~/temp/hyperlang/
    split:x:/@p5.web.request.parse-mime/**/filename/[0,1]?value
      =:.
    switch:x:/@split/0/-?name
      case:hl

        /*
         * A single Hyperlambda file.
         *
         * Invoking Hyperlambda file responsible for importing file, making sure we
         * pass in the filename, as returned from [p5.web.request.parse-mime].
         */
        eval-x:x:/+/*
        micro.evaluate.file:@HYPERLANG/helpers/import-hyperlambda-file.hl
          filename:{0}{1}{2}
            :x:/@p5.web.request.parse-mime/**/filename/[0,1]/*/folder?value
            :x:/@p5.web.request.parse-mime/**/filename/[0,1]/*/prefix?value
            :x:/@p5.web.request.parse-mime/**/filename/[0,1]?value

      case:zip

        /*
         * A zip file, possibly containing multiple Hyperlambda files.
         * Making sure we unzip it, and import each Hyperlambda file found in it.
         */
        unzip:{0}{1}{2}
          :x:/@p5.web.request.parse-mime/**/filename/[0,1]/*/folder?value
          :x:/@p5.web.request.parse-mime/**/filename/[0,1]/*/prefix?value
          :x:/@p5.web.request.parse-mime/**/filename/[0,1]?value
          dest:~/temp/hyperlang/

        /*
         * Mac OS X tends to create "funny additional" folders, which we simply remove.
         */
        set:x:/@unzip/*/~__MACOSX

        /*
         * Iterating through each zip entry.
         */
        for-each:x:/@unzip/*?name

          /*
           * Sanity checking filename before we invoke file responsible for importing file,
           * otherwise we simply ignore the file entirely.
           */
          if
            ends-with:x:/@_dp?value
              src:.hl

            /*
             * Currently iterated file is a Hyperlambda file.
             */
            eval-x:x:/+/*
            micro.evaluate.file:@HYPERLANG/helpers/import-hyperlambda-file.hl
              filename:x:/@_dp?value

      default

        /*
         * Unsupported file format.
         */
        p5.web.echo:ERROR
        return

    /*
     * Committing transaction.
     */
    p5.mysql.transaction.commit

