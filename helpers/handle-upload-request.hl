

/*
 * File responsible for handling upload requests.
 *
 * Requires user is logged in as root.
 */





/*
 * Sanity checking arguments.
 */
micro.lambda.contract.min:x:/..
  files





/*
 * Verifying user is logged in as root, and if not, returning error to client.
 */
whoami
if:x:/@whoami/*/role?value
  !=:root

  /*
   * User is not root.
   */
  p5.web.response.set-status-code:401
  p5.web.response.set-status-description:401 - You are not authorized to perform this action
  p5.web.echo:401, not authorized
  return





/*
 * Opening a database connection, and creating a database transaction, to avoid
 * importing "partial files".
 */
p5.mysql.connect:[magic-menu]
  p5.mysql.transaction.begin

    /*
     * Looping through each file supplied by caller.
     */
    for-each:x:/../*/files/*

      /*
       * Checking currently iterated file's extension.
       *
       * Candidates are ".hl" and ".zip".
       * A zip file is considered a "backup", but will still be "appended" to existing
       * database.
       * An .hl file (Hyperlambda) is considered a single command entry, and
       * will also be added to existing dictionary.
       */
      split:x:/@_dp/#?value
        =:.
      switch:x:/@split/0/-?name
        case:hl

          /*
           * A single Hyperlambda file.
           *
           * Invoking Hyperlambda file responsible for importing file, making sure we
           * pass in the filename, as returned from [p5.web.request.parse-mime].
           */
          eval-x:x:/+/*
          micro.evaluate.file:@MAGIC/helpers/import-hyperlambda-file.hl
            filename:x:/@_dp/#?value

        case:zip

          /*
           * A zip file, possibly containing multiple Hyperlambda files.
           * Making sure we unzip it, and import each Hyperlambda file found in it.
           */
          unzip:x:/@_dp/#?value
            dest:~/temp/

          /*
           * Mac OS X tends to create "funny additional" folders, which we simply remove.
           */
          set:x:/@unzip/*/~__MACOSX

          /*
           * Iterating through each zip entry.
           */
          for-each:x:/@unzip/*?name

            /*
             * Sanity checking filename before we invoke file responsible for importing file,
             * otherwise we simply ignore the file entirely.
             */
            if
              ends-with:x:/@_dp?value
                src:.hl

              /*
               * Currently iterated file is a Hyperlambda file.
               */
              eval-x:x:/+/*
              micro.evaluate.file:@MAGIC/helpers/import-hyperlambda-file.hl
                filename:x:/@_dp?value

        default

          /*
           * Unsupported file format.
           */
          p5.web.response.set-status-code:406
          p5.web.response.set-status-description:406 - File type is not supported
          p5.web.echo:406, unsupported file type, import aborted
          return

    /*
     * Committing transaction.
     */
    p5.mysql.transaction.commit

