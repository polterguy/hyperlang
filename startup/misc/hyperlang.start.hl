
/*
 * Creates the event that actually starts Hyperlang.
 *
 * You can override the default greeting with [greeting]
 */
create-event:hyperlang.start

  /*
   * Defaults.
   */
  .defaults
    greeting:[Hello]

  /*
   * Checking if Hyperlang is already initiated from before, and if so, making
   * sure we close any previous instances first.
   */
  if
    fetch:x:/0/0?value
      widget-exists:hyperlang-listener
    delete-widget:hyperlang-listener

  /*
   * Making sure we reset grammar position.
   */
  hyperlang.grammar-position.clear

  /*
   * Greets user, and asks for input.
   */
  hyperlang.listen:x:(/../*/greeting|/@.defaults/*/greeting)/$?value

  /*
   * Creating main Hyperlang widget.
   */
  create-widget:hyperlang-listener
    class:hyperlang-listener shaded rounded air-inner
    events

      /*
       * Closes Hyperlang.
       */
      hyperlang.quit

        /*
         * Says goodbye, close options, and deletes main Hyperlang input widget,
         * if it exists.
         */
        hyperlang.speak:[Goodbye]
        hyperlang.show-options.close
        if
          fetch:x:/0/0?value
            widget-exists:hyperlang-listener
          delete-widget:hyperlang-listener

      /*
       * Attempts to restart the listening loop.
       */
      hyperlang.restart
        hyperlang.listen:x:/../*/_arg?value

    widgets
      div
        class:strip
        widgets
          button
            style:"margin-bottom:0;"
            innerValue:@"<span class=""icon-close""></span>"
            title:Close Hyperlang
            accesskey:Q
            oninit

              /*
               * Setting initial focus to "Close" button, to make it easy to close module.
               */
              micro.page.set-focus:x:/../*/_event?value

            onclick

              /*
               * Closing Hyperlang.
               */
              hyperlang.quit

          literal
            element:label
            class:hyperlang-tip
            visible:false
            events

              /*
               * Shows the specified text to the user.
               */
              hyperlang.set-text

                /*
                 * Checking if this is an empty piece of text, at which point we
                 * simply hide label entirely, and return early.
                 */
                if:x:/../*/_arg?value
                  =:
                  or:x:/../*/_arg?value
                    not

                  /*
                   * Making widget invisible, and returning early.
                   */
                  set-widget-property:x:/../*/_event?value
                    visible:false
                  return

                /*
                 * Making widget sure widget becomes visible.
                 */
                set-widget-property:x:/../*/_event?value
                  visible:true

                /*
                 * Sets the innerValue of current widget to whatever we were given.
                 */
                set-widget-property:x:/../*/_event?value
                  innerValue:x:/../*/_arg?value

              /*
               * Retrieves the specified text to the caller.
               */
              hyperlang.get-text

                /*
                 * Returns the innerValue of current widget to the caller.
                 */
                get-widget-property:x:/../*/_event?value
                  innerValue:x:/../*/_arg?value
                return:x:/@get-widget-property/*/*?value
