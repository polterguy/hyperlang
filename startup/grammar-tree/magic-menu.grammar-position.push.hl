
/*
 * Pushes the given [_arg] position (database ID) unto our "grammar-tree instruction pointer".
 *
 * Requires [_arg] being the database ID of a "command", or alternatively the database 
 * global_id value of the command.
 */
create-event:magic-menu.grammar-position.push

  /*
   * Sanity checking arguments.
   */
  micro.lambda.contract.min:x:/..
    _arg:string

  /*
   * Checking if [_arg] is possible to convert to a long value, at which point we
   * assume it's the command's database ID, otherwise we assume it's the global_id
   * for the command, and we select the actual ID, and pop that.
   */
  if
    p5.types.can-convert:x:/../*/_arg?value
      type:long
    not

    /*
     * Selecting the actual ID for the command with the given global_id, and pushing
     * that unto our stack.
     */
    p5.mysql.connect:[magic-menu]
      p5.mysql.scalar:@"select id from commands where global_id = @global_id"
        @global_id:x:/../*/_arg?value
      if:x:/@p5.mysql.scalar?value
        not
        throw:That command doesn't exist
      set:x:/../*/_arg?value
        src:x:/@p5.mysql.scalar?value.long

  /*
   * Retrieving current position, to see if specified position is the
   * same as our current position, and if it is, we don't evaluate the rest
   * of our lambda, but return early instead, to avoid pushing the same ID twice.
   */
  magic-menu.grammar-position.get
  if:x:/@magic-menu.grammar-position.get?value
    and:x:/@magic-menu.grammar-position.get?value.long
      =:x:/../*/_arg?value.long

    /*
     * No reasons to push the same ID twice.
     */
    return

  /*
   * Sets the current position to the specified [_arg].
   */
  p5.web.viewstate.get:magic-menu.position
  add:x:/../*/p5.web.viewstate.set/*/*
    src:x:/@p5.web.viewstate.get/*/*/*
  add:x:/../*/p5.web.viewstate.set/*/*
    src:x:/../*/_arg?value
  p5.web.viewstate.set:magic-menu.position
    src
      positions

  /*
   * Posting "changed" event.
   */
  magic-menu.position.changed
    is-push:bool:true
