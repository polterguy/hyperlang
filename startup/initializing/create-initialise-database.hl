
/*
 * Creating database schema if it doesn't exist.
 */
try
  p5.mysql.connect:[magic-menu]
    p5.mysql.execute:@"

create table if not exists `commands` (
  `id` int(10) unsigned not null auto_increment,
  `parent` int(10) unsigned null,
  `hyperlambda` longtext collate utf8mb4_unicode_ci not null,
  `username` varchar(1024) collate utf8mb4_unicode_ci null,
  `global` int(10) unsigned not null default 0,
  `global_id` varchar(100) not null,
  primary key (`id`),
  unique key `id_UNIQUE` (`id`),
  key `commands_commands_idx` (`parent`),
  unique key `global_id_UNIQUE` (`global_id`),
  constraint `fk_commands_commands` foreign key (`parent`) references `commands` (`id`) on delete cascade on update cascade
) engine=InnoDB auto_increment=0 default charset=utf8mb4 collate=utf8mb4_unicode_ci;

create table if not exists `phrases` (
  `id` int(10) unsigned not null auto_increment,
  `command` varchar(256) collate utf8mb4_unicode_ci not null,
  `lang` varchar(20) collate 'utf8mb4_unicode_ci' not null,
  `commandid` int(10) unsigned not null,
  `lastused` datetime null,
  primary key (`id`),
  unique key `id_UNIQUE` (`id`),
  key `index_command` (`command`(50)),
  key `phrases_commands_idx` (`commandid`),
  unique key `command_lang_commandid_UNIQUE` (`command`, `lang`, `commandid`),
  constraint `fk_phrases_commands` foreign key (`commandid`) references `commands` (`id`) on delete cascade on update cascade
) engine=InnoDB auto_increment=0 default charset=utf8mb4 collate=utf8mb4_unicode_ci;

"

    /*
     * Checking if database is empty, and if so, doing the initial import of all items from
     * our "/initial-data/" folder.
     */
    p5.mysql.scalar:@"select count(*) from commands"
    if:x:/-?value.long
      =:long:0

      /*
       * Iterating through each file in our "/initial-data/" folder, and importing it.
       */
      list-files:@MAGIC/initial-data/
      for-each:x:/@list-files/*?name
        eval-x:x:/+/*
        micro.evaluate.file:@MAGIC/helpers/import-hyperlambda-file.hl
          filename:x:/@_dp?value

catch

  /*
   * Attempting to create database, unless this is our second invocation, for then
   * to invoke self again, for simplicity reasons.
   */
  if:x:/../*/second?value
    not

    /*
     * Making sure we prepend the database prefix in front of schema name.
     */
    p5.config.get:p5.data.prefix

    /*
     * Creating database schema.
     */
    p5.mysql.connect:[sys]
      p5.mysql.execute:@"create schema `{0}magic-menu`;"
        :x:/@p5.config.get/*?value

    /*
     * Invoking self, with [second] being true, to avoid never ending recursion.
     */
    micro.evaluate.file:x:/..?name
      second:bool:true
