
/*
 * Creates our plugin Active Event, that initialized Magic menu, by creating
 * a "toolbar button", that allows us to start Magic menu.
 *
 * Notice, this button is only created if there exists a widget with a 
 * CSS class containing the CSS class "toolbar" on the page, and the button 
 * is automatically injected into the first matching widget.
 *
 * Notice, this toolbar button is also only created if user is logged in,
 * which implies that Magic menu is only available for "actual users" in
 * your system, and not guest accounts, or random visitors that are not logged in.
 */
create-event:desktop.plugins.post.create-toolbar-button

  /*
   * We only allow speech recognition for registered users in system.
   */
  whoami
  if:x:/@whoami/*/default?value
    return

  /*
   * Trying to find the first widget on page with a CSS class containing the text "toolbar".
   */
  p5.web.widgets.find-first-like
    class:toolbar
  if:x:/@p5.web.widgets.find-first-like/*/*?value

    /*
     * Includes CSS file.
     */
    p5.web.include-css-file:@MAGIC/media/main.css

    /*
     * Try to insert our widget as the second last widget into our "toolbar".
     */
    p5.web.widgets.get-children:x:/@p5.web.widgets.find-first-like/*/0?value

    /*
     * Checking if our toolbar actually had any children at all.
     */
    if:x:/@p5.web.widgets.get-children/*/*

      /*
       * Toolbar had children, adding our Magic menu button as the second 
       * last button within it.
       */
      eval-x:x:/+/*/*
      add:x:/././*/create-widget
        src
          before:x:/@p5.web.widgets.get-children/*/0/-?value

    else

      /*
       * The toolbar had no children, simply appending Magic menu into it.
       */
      eval-x:x:/+/*/*
      add:x:/././*/create-widget
        src
          parent:x:/@p5.web.widgets.find-first-like/*/*?value

    /*
     * Creating our button widget.
     */
    create-widget:magic-menu-start-button
      element:button
      class:magic-menu-start
      title:Starts and stops the Magic menu, keyboard shortcut M
      innerValue:@"<span class=""icon-magic-wand""></span>"
      accesskey:M
      oninit

        /*
         * Checking if we have a "keep alive" session variable, across page loads,
         * and if so, make sure we initialize Magic menu by default during pageload.
         */
        p5.web.session.get:magic-menu.keep-alive
        if:x:/@p5.web.session.get/*?value

          /*
           * Starts Magic menu.
           */
          magic-menu.start
            greeting:[OK]

        /*
         * Clearing session variable, to avoid automatically starting it during
         * the next page load.
         */
        p5.web.session.set:magic-menu.keep-alive

      onclick

        /*
         * Checking if we should start or stop the Magic Menu.
         */
        if
          magic-menu.exists

          /*
           * Magic menu already exists, stopping it.
           */
          magic-menu.quit

        else

          /*
           * Magic menu doesn't exist, hence we start it.
           */
          magic-menu.start

        /*
         * Toggling button.
         */
        micro.css.toggle:x:/../*/_event?value
          class:toggled
