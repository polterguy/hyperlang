
/*
 * Creates the event that actually starts Magic menu.
 *
 * You can override the default greeting with [greeting].
 */
create-event:magic-menu.start

  /*
   * Defaults.
   */
  .defaults
    greeting:[Hello]

  /*
   * Checking if Magic menu is already initiated from before, and if so, making
   * sure we close any previous instances first.
   */
  if
    fetch:x:/0/0?value
      widget-exists:magic-menu-listener
    delete-widget:magic-menu-listener

  /*
   * Making sure we reset grammar position.
   */
  magic-menu.grammar-position.clear

  /*
   * Unwrapping greeting.
   *
   * This is necessary to make sure we display the specified greeting as the
   * text of our "info" widget.
   */
  magic-menu.unwrap-phrase:x:(/../*/greeting|/@.defaults/*/greeting)/$?value

  /*
   * Creating main Magic menu widget.
   */
  create-widget:magic-menu-listener
    class:magic-menu-listener shaded rounded
    widgets
      container:magic-menu-help-wrapper
      div
        class:strip fill
        widgets
          button
            style:"margin-bottom:0;"
            title:Turns off or on speech input and output
            onclick

              /*
               * Figuring out if we should pause or restart.
               */
              if
                magic-menu.speech.is-enabled

                /*
                 * Disabling speech input.
                 */
                magic-menu.speech.turn-off

              else

                /*
                 * Enabling speech input.
                 */
                magic-menu.speech.turn-on

            widgets
              literal
                element:span
                class:icon-pause2
                oninit

                  /*
                   * Figuring out if speech is enabled or disabled for the current user.
                   */
                  if
                    magic-menu.speech.is-enabled
                    not

                    /*
                     * Speech is by default disabled for current session.
                     */
                    micro.css.delete:magic-menu-listener
                      class:magic-menu-listening
                    set-widget-property:x:/../*/_event?value
                      class:icon-mic

                    /*
                     * When speech is by default disabled for user, we automatically
                     * show our options, since no other input elements exists.
                     */
                    magic-menu.options.show

                    /*
                     * We also "toggle" our "Help" button, since options are being shown.
                     */
                    micro.css.add:magic-menu-show-options-button
                      class:toggled

                events

                  /*
                   * Turns off speech, both input and output.
                   *
                   * Notice, this only updates our GUI, since the actual persisting
                   * of whether or not speech is enabled or not, is being done in a
                   * global Active Event.
                   */
                  magic-menu.speech.turn-off

                    /*
                     * Updating CSS class for button and main widget.
                     */
                    micro.css.delete:magic-menu-listener
                      class:magic-menu-listening
                    set-widget-property:x:/../*/_event?value
                      class:icon-mic

                    /*
                     * Stopping all speech, both input and output.
                     */
                    micro.listen.stop
                    micro.speak.stop

                    /*
                     * Notice, when speech is disabled, we make sure we show options
                     * by default.
                     */
                    magic-menu.options.show

                    /*
                     * We also "toggle" our "Help" button, since options are being shown.
                     */
                    micro.css.add:magic-menu-show-options-button
                      class:toggled

                  /*
                   * Turns on speech, both input and output.
                   *
                   * Notice, this only updates our GUI, since the actual persisting
                   * of whether or not speech is enabled or not, is being done in a
                   * global Active Event.
                   */
                  magic-menu.speech.turn-on

                    /*
                     * Updating CSS class for button and main widget.
                     */
                    micro.css.add:magic-menu-listener
                      class:magic-menu-listening
                    set-widget-property:x:/../*/_event?value
                      class:icon-pause2

                    /*
                     * Restarting input loop.
                     */
                    magic-menu.listen:[Talk to me]


          literal:magic-menu-current-text
            element:label
            class:magic-menu-tip
            innerValue:x:/@magic-menu.unwrap-phrase?value

          button:magic-menu-show-options-button
            style:"margin-bottom:0;"
            innerValue:@"<span class=""icon-question""></span>"
            title:Show options
            events

              /*
               * Trapping when options are displayed, to make sure we toggle
               * our button accordingly.
               */
              magic-menu.options.show

                /*
                 * Making sure our "Help" button becomes "toggled".
                 */
                micro.css.add:x:/../*/_event?value
                  class:toggled

                /*
                 * This might look funny, but since we're attaching ourselves to
                 * an event that is already handled other places, which also
                 * is expected to return results to its caller, we'll need to
                 * make sure we return whatever that event returned.
                 *
                 * Otherwise, we'll end up "swallowing" that return value, making
                 * the event invocation return nothing.
                 */
                return:x:/../*/_arg?value

              /*
               * Trapping when options are hidden, to make sure we toggle
               * our button accordingly.
               */
              magic-menu.options.close

                /*
                 * Making sure our "Help" button becomes "untoggled".
                 */
                micro.css.delete:x:/../*/_event?value
                  class:toggled

            onclick

              /*
               * Checking if widget exists already, and if so, we hide it.
               */
              if
                fetch:x:/0/0?value
                  widget-exists:magic-menu-help

                /*
                 * Hides options for Magic menu, and deletes CSS "toggled" class
                 * for button.
                 */
                magic-menu.options.close

              else

                /*
                 * Showing options for Magic menu, and adds CSS "toggled" class
                 * for button.
                 */
                magic-menu.options.show

          button
            style:"margin-bottom:0;"
            innerValue:@"<span class=""icon-plus""></span>"
            title:Teach computer phrase
            visible:false
            events

              /*
               * Event that displays our "create-command" button.
               */
              magic-menu.display-create-command-button

                /*
                 * Simply making widget visible.
                 */
                set-widget-property:x:/../*/_event?value
                  visible:true
                  .spoken:x:/../*/_arg?value

              /*
               * Event that hides our "create-command" button.
               */
              magic-menu.hide-create-command-button

                /*
                 * Simply making widget visible.
                 */
                set-widget-property:x:/../*/_event?value
                  visible:false

            onclick

              /*
               * Invokes event responsible for creating a new association, making
               * sure we pass in proper arguments.
               */
              get-widget-property:x:/../*/_event?value
                .spoken
              magic-menu.grammar-position.get
              if:x:/@magic-menu.grammar-position.get?value
                eval-x:x:/+/*/*
                add:x:/../*/magic-menu.command.create
                  src
                    pos:x:/@magic-menu.grammar-position.get?value
              magic-menu.command.create:x:/@get-widget-property/*/*?value

              /*
               * Deletes the visual clue, indicating we're listening for input,
               * and makes sure we stop listening and speaking.
               */
              micro.css.delete:magic-menu-listener
                class:magic-menu-listening
              micro.listen.stop
              micro.speak.stop

          button
            style:"margin-bottom:0;"
            innerValue:@"<span class=""icon-cross""></span>"
            title:Close Magic menu
            accesskey:Q
            onclick

              /*
               * Closing Magic menu.
               */
              magic-menu.stop

  /*
   * Greets user, and asks for input.
   */
  magic-menu.listen:x:/@magic-menu.unwrap-phrase?value
