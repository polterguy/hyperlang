/*
 * Creates the event that actually starts Magic menu.
 *
 * You can override the default greeting with [greeting].
 */
create-event:magic-menu.start

  /*
   * Defaults.
   */
  .defaults
    greeting:[Hello]

  /*
   * Sanity checking arguments.
   */
  micro.lambda.contract.optional:x:/..
    greeting:string

  /*
   * Checking if Magic menu is already initiated from before, and if so, simply
   * returning early.
   */
  if
    fetch:x:/0/0?value
      widget-exists:magic-menu-listener
    return

  /*
   * Making sure we reset grammar position.
   */
  magic-menu.grammar-position.clear

  /*
   * Unwrapping greeting.
   *
   * This is necessary to make sure we display the specified greeting as the
   * text of our "info" widget.
   */
  magic-menu.unwrap-phrase:x:(/../*/greeting|/@.defaults/*/greeting)/$?value

  /*
   * Creating main Magic menu widget.
   */
  create-widget:magic-menu-listener
    class:magic-menu-listener shaded rounded bg
    events


      /*
       * Quits Magic menu.
       */
      magic-menu.quit

        /*
         * Speaks "Goodbye" and deletes widget.
         */
        micro.speech.stop
        delete-widget:x:/../*/_event?value


      /*
       * Returns true if Magic Menu exists.
       */
      magic-menu.exists

        /*
         * Simply returns "true", since if it doesn't exist, this lambda event won't either.
         */
        return:bool:true


    widgets

      /*
       * This is the container for our actual help items.
       */
      container:magic-menu-help-wrapper

      /*
       * Toolbar strip at the bottom of our widget, which allows the user to turn on
       * or off speech input/output, in addition to displaying help and closing 
       * the Magic menu.
       */
      div
        class:strip fill magic-menu-bottom-toolbar-wrapper
        widgets
          button
            title:Pauses or turns off/on speech input/output, keyboard shortcut P
            accesskey:P
            onclick

              /*
               * Toggles speech input/output.
               */
              magic-menu.speech.toggle

            events


              /*
               * Toggles speech input/output.
               */
              magic-menu.speech.toggle

                /*
                 * Figuring out if we should pause or restart.
                 */
                if
                  magic-menu.speech.is-enabled

                  /*
                   * Disabling speech input.
                   */
                  magic-menu.speech.turn-off

                else

                  /*
                   * Enabling speech input.
                   */
                  magic-menu.speech.turn-on


            widgets
              literal
                element:span
                class:icon-pause2
                oninit

                  /*
                   * Figuring out if speech is enabled or disabled for the current user.
                   */
                  if
                    magic-menu.speech.is-enabled
                    not

                    /*
                     * Speech is by default disabled for current session.
                     */
                    micro.css.delete:magic-menu-listener
                      class:magic-menu-listening
                    set-widget-property:x:/../*/_event?value
                      class:icon-mic

                  /*
                   * Displaying options by default.
                   */
                  magic-menu.options.show

                events


                  /*
                   * Turns off speech, both input and output.
                   *
                   * Notice, this only updates our GUI, and stops our "input loop", 
                   * since the actual persisting of whether or not speech is enabled 
                   * or not, is being done in a global Active Event.
                   */
                  magic-menu.speech.turn-off

                    /*
                     * Updating CSS class for button and main widget.
                     */
                    micro.css.delete:magic-menu-listener
                      class:magic-menu-listening
                    set-widget-property:x:/../*/_event?value
                      class:icon-mic

                    /*
                     * Stopping all speech, both input and output.
                     */
                    micro.speech.stop

                    /*
                     * Notice, when speech is disabled, we make sure we show options
                     * by default.
                     */
                    magic-menu.options.show

                    /*
                     * We also "toggle" our "Help" button, since options are being shown.
                     */
                    micro.css.add:magic-menu-show-options-button
                      class:toggled


                  /*
                   * Turns on speech, both input and output.
                   *
                   * Notice, this only updates our GUI, and stops our "input loop", 
                   * since the actual persisting of whether or not speech is enabled 
                   * or not, is being done in a global Active Event.
                   */
                  magic-menu.speech.turn-on

                    /*
                     * Updating CSS class for button and main widget.
                     */
                    micro.css.add:magic-menu-listener
                      class:magic-menu-listening
                    set-widget-property:x:/../*/_event?value
                      class:icon-pause2

                    /*
                     * Restarting input loop.
                     */
                    magic-menu.listen:[Talk to me]


          literal:magic-menu-current-text
            element:label
            role:button
            class:magic-menu-tip
            innerValue:x:/@magic-menu.unwrap-phrase?value
            onclick

              /*
               * Displaying a modal window with current answer.
               */
              get-widget-property:x:/../*/_event?value
                title
              if:x:/-/*/*?value
                not
                or:x:/-/*/*?value
                  =:
                return
              create-widgets
                micro.widgets.modal:magic-menu-show-tip-modal
                  widgets
                    p
                      innerValue:x:/@get-widget-property/*/*?value
                    div
                      class:right
                      widgets
                        button
                          innerValue:Close
                          oninit
                            micro.page.set-focus:x:/../*/_event?value
                          onclick
                            delete-widget:magic-menu-show-tip-modal

          button:magic-menu-show-options-button
            innerValue:@"<span class=""icon-question""></span>"
            title:Help, or show options, keyboard shortcut H
            accesskey:H
            events


              /*
               * Trapping when options are displayed, to make sure we toggle
               * our button accordingly.
               */
              magic-menu.options.show

                /*
                 * Making sure our "Help" button becomes "toggled".
                 */
                micro.css.add:x:/../*/_event?value
                  class:toggled

                /*
                 * This might look weird, but since we're attaching ourselves to
                 * an event that is already handled another place, which also
                 * is expected to return results to its caller, we'll need to
                 * make sure we return whatever that event returned.
                 * Otherwise, we'll end up "swallowing" that return value, making
                 * the event invocation return null.
                 */
                return:x:/../*/_arg?value


              /*
               * Trapping when options are hidden, to make sure we toggle
               * our button accordingly.
               */
              magic-menu.options.close

                /*
                 * Making sure our "Help" button becomes "untoggled".
                 */
                micro.css.delete:x:/../*/_event?value
                  class:toggled


            onclick

              /*
               * Checking if "Help" widget exists, and if so, we hide it, otherwise
               * we display it.
               */
              if
                magic-menu.options.exists

                /*
                 * Hides options for Magic menu.
                 */
                magic-menu.options.close

              else

                /*
                 * Showing options for Magic menu.
                 */
                magic-menu.options.show

          button
            innerValue:@"<span class=""icon-plus""></span>"
            title:Teach computer phrase
            class:hide
            events


              /*
               * Event that displays our "create-command" button.
               *
               * Expects [_arg] being command to (optionally) be created by user.
               */
              magic-menu.display-create-command-button

                /*
                 * Sanity check.
                 */
                micro.lambda.contract.min:x:/..
                  _arg:string

                /*
                 * Simply making widget visible.
                 */
                set-widget-property:x:/../*/_event?value
                  .spoken:x:/../*/_arg?value
                micro.css.delete:x:/../*/_event?value
                  class:hide


              /*
               * Event that hides our "create-command" button.
               */
              magic-menu.hide-create-command-button

                /*
                 * Simply making widget visible, and removing any reference to
                 * previously spoken phrase.
                 */
                delete-widget-property:x:/../*/_event?value
                  .spoken
                micro.css.add:x:/../*/_event?value
                  class:hide


            onclick

              /*
               * Invokes event responsible for creating a new association, making
               * sure we pass in proper arguments.
               *
               * First we retrieve what was spoken, and whether or not we have 
               * a "grammar-position" or not.
               */
              get-widget-property:x:/../*/_event?value
                .spoken
              magic-menu.grammar-position.get

              /*
               * Applying arguments to our [magic-menu.command.create] invocation.
               */
              if:x:/@magic-menu.grammar-position.get?value

                /*
                 * Making sure we pass in [pos] to our create invocation.
                 */
                eval-x:x:/+/*/*
                add:x:/../*/magic-menu.command.create
                  src
                    pos:x:/@magic-menu.grammar-position.get?value

                /*
                 * Making sure the default [global-id] becomes a "materialised path".
                 */
                p5.mysql.connect:[magic-menu]
                  p5.mysql.scalar:@"select global_id from commands where id = @id"
                    @id:x:/@magic-menu.grammar-position.get?value
                  eval-x:x:/+/*/*
                  add:x:/../*/magic-menu.command.create
                    src
                      global-id:{0}-child
                        :x:/@p5.mysql.scalar?value

              /*
               * Invoking event responsible for creating a new phrase to command 
               * association.
               */
              magic-menu.command.create:x:/@get-widget-property/*/*?value

              /*
               * Deletes the visual clue, indicating we're listening for input,
               * and makes sure we stop listening and speaking.
               */
              micro.css.delete:magic-menu-listener
                class:magic-menu-listening
              micro.speech.stop

  /*
   * Greets user, and asks for input.
   * Notice, caller can avoid this by invoking event with a "false" argument.
   */
  if:x:/../*/_arg?value
    !=:bool:false

    /*
     * Caller did not explicitly initiate Magic Menu with a "false" argument,
     * implying we need to greet the user, and start our listening loop.
     */
    magic-menu.listen:x:/@magic-menu.unwrap-phrase?value
