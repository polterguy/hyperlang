
/*
 * Internal event being the actual implementation of [magic-menu.listen].
 *
 * Optionally pass in [onfinish].
 */
create-event:magic-menu._listen

  /*
   * Sanity checking arguments.
   */
  micro.lambda.contract.optional:x:/..
    onfinish

  /*
   * Our default [onfinish] implementation simply invokes [magic-menu.command.handle].
   */
  .defaults
    onfinish
      magic-menu.command.handle:x:/../*/text?value

  /*
   * If widget was closed, we simply abort.
   */
  if
    fetch:x:/0/0?value
      widget-exists:magic-menu-listener
    not
    return

  /*
   * Checking if speech is enabled, and if not, returning early.
   */
  if
    magic-menu.speech.is-enabled
    not

    /*
     * Speech is not enabled, returning early.
     */
    return

  /*
   * Making sure we add "active" CSS class when speech recognition is initiated.
   */
  micro.css.add:magic-menu-listener
    class:magic-menu-listening

  /*
   * Retrieving language for user, to figure out language to listen for, etc.
   */
  magic-menu.settings.get-language

  /*
   * Applying [onfinish], or default implementation if none was given.
   */
  add:x:/../*/micro.speech.listen/*/onfinish/*/.lambda
    src:x:(/../*/onfinish|/@.defaults/*/onfinish)/$/*

  /*
   * Start listening.
   *
   * Making sure we evaluate [onfinish] inside a try/catch block.
   */
  eval-x:x:/+/*/lang
  micro.speech.listen
    lang:x:/@magic-menu.settings.get-language/*/lang?value
    onfinish

      /*
       * Contains the lambda [onfinish] callback to be evaluated once speach
       * has been captured.
       */
      .lambda

      /*
       * If widget was closed, we simply return early to abort evaluation of
       * the rest of our lambda.
       */
      if
        fetch:x:/0/0?value
          widget-exists:magic-menu-listener
        not
        return

      /*
       * Deletes the visual clue, indicating we're listening for input.
       */
      micro.css.delete:magic-menu-listener
        class:magic-menu-listening

      /*
       * Making sure we can intelligently handle exceptions.
       */
      try

        eval-x:x:/+/*/text
        eval:x:/@.lambda
          text:x:/../*/text?value

      catch

        /*
         * Showing user feedback about what went wrong.
         */
        magic-menu.listen:[An exception occurred]
        micro.windows.info:x:/@message?value
          class:micro-windows-info warning


