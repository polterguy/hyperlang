
/*
 * Invoked when Magic menu should speak something.
 *
 * Expects [_arg] to be whatever should be spoken, and [onfinish] being what to
 * do once content has been spoken.
 *
 * Optionally, pass in [voice] to override the default voice to use, which is 
 * fetched from the user's settings.
 */
create-event:magic-menu.speak

  /*
   * Signal node.
   */
  .signal

  /*
   * Sanity checking arguments.
   */
  micro.lambda.contract.min:x:/..
    _arg:string

  /*
   * If widget was closed, we simply abort.
   */
  if
    fetch:x:/0/0?value
      widget-exists:magic-menu-listener
    not
    return

  /*
   * Checking if speech is enabled, and if not, evaluating any potential
   * [onfinish] lambdas immediately, setting text to what was supposed to be spoken,
   * and returning early.
   */
  if
    magic-menu.speech-is-enabled
    not

    /*
     * Speech is not enabled, evaluating [onfinish] if existing, updating text, 
     * and returning early.
     */
    magic-menu.set-text:x:/../*/_arg?value
    eval:x:/../*/onfinish
    return

  /*
   * Unwrapping any references in [_arg] given.
   */
  magic-menu.unwrap-phrase:x:/../*/_arg?value

  /*
   * Applies arguments, and adds [voice] unless an explicit voice was given as an argument.
   */
  if:x:/../*/voice?value
    not

    /*
     * No voice was given as an argument, making sure we apply the default voice from
     * user's settings.
     */
    magic-menu.settings.get-language
    eval-x:x:/+/*/*
    add:x:/../*/micro.speak
      src
        voice:{0},{1}-{2}
          :x:/@magic-menu.settings.get-language/*/voice?value
          :x:/@magic-menu.settings.get-language/*/lang?value
          :x:/@magic-menu.settings.get-language/*/sublang?value
  add:x:/../*/micro.speak
    src:x:/@.signal/--(!/_arg)

  /*
   * Speaks given [_arg], now "unwrapped" with any references, with our configured voice.
   */
  micro.speak:x:/@magic-menu.unwrap-phrase?value
