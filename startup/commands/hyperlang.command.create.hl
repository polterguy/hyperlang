
/*
 * Creates the event that allows the user to configure a phrase to a piece of
 * Hyperlambda. User is expected to be "root" to be allowed evaluating this lambda.
 *
 * Expects [_arg] to be phrase to create association for.
 *
 * Optionally pass in [pos] being the parent phrase to create phrase to command association for.
 * You can also pass in [force-parent] and set its value to boolean "true", to make sure user can't
 * make the command become a "global" command. The latter will only be respected if the command does
 * have an explicit [pos] declaration.
 *
 * You can also optionally pass in [global] and [private] to set the initial values for both of these
 * values. However, the user can still explicitly change these if he wants to.
 */
create-event:hyperlang.command.create

  /*
   * Default values.
   */
  .defaults
    hyperlambda:@"/*
 * To simply speak something, and listen for input afterwards, you can use something
 * such as the following.
 *
 * Optionally, to handle the input yourself, pass in an [onfinish] lambda callback.
 */
hyperlang.listen:OK, I did that. What do you want me to do now?

/*
 * If you return ""false"", the ""current position stack"" is not changed,
 * if you return ""true"", or nothing at all, the stack is updated, and the
 * current command becomes the ""current position"" in your ""grammar tree"".
 */
//return:bool:false
"

  /*
   * Sanity checking arguments.
   */
  micro.lambda.contract.min:x:/..
    _arg:string
  micro.lambda.contract.optional:x:/..
    pos:long
    hyperlambda:string
    force-parent:bool
    global:bool
    private:bool

  /*
   * Verifying user is root, and if not, we don't allow him to evaluate event.
   *
   * The reason is that this eventallows the user to create arbitrary Hyperlambda,
   * that is evaluated on the server.
   */
  whoami
  if:x:/@whoami/*/role?value
    !=:root

    /*
     * We don't allow execution of this lambda, unless user is root.
     */
    return

  /*
   * Checking to see if we're in some specific point in our "grammar tree".
   */
  _pos
  if:x:/../*/pos?value

    /*
     * Using explicitly given position from [pos].
     */
    set:x:/@_pos?value
      src:x:/../*/pos?value

  /*
   * Checking if user provided [force-parent], and if so, deleting the "Global"
   * checkbox, to make sure user can't create a global command.
   */
  if:x:/../*/force-parent?value
    and:x:/../*/pos?value

    /*
     * Caller supplied a [force-parent], which implies the user cannot explicitly
     * choose to make this a "global" command.
     */
    set:x:/../*/create-widgets/**/.data-field/=global/././.

  else-if:x:/../*/global?value
    =:bool:true

    /*
     * Called supplied an initial "true" value for the "global" value.
     */
    add:x:/../*/create-widgets/**/.data-field/=global/.
      src:checked

  /*
   * Checking if caller supplied a "false" value for "private".
   */
  if:x:/../*/private?value
    =:bool:false

    /*
     * Called supplied an initial "false" value for the "private" value.
     */
    set:x:/../*/create-widgets/**/.data-field/=private/./*/checked

  /*
   * Retrieving language for user, to parametrise SQL.
   */
  hyperlang.language.get

  /*
   * Creating a modal widget, which asks user to type in Hyperlambda, and configure
   * a piece of Hyperlambda, which will result in associating the specified Hyperlambda
   * with the given [_arg] phrase.
   */
  eval-x:x:/+/**(/_pos|/hypereval.widgets.hyperlambda-textarea/*/value)
  create-widgets
    micro.widgets.modal:hyperlang-create-phrase2hyper-association
      widgets
        h3
          innerValue:New association
        label
          innerValue:Phrase(s)
          for:hyperlang-synonymous-phrases
          style:"margin-bottom:0;"
        literal:hyperlang-synonymous-phrases
          element:textarea
          class:fill
          rows:5
          placeholder:Type in phrase(s) here, one for each line ...
          title:Phrase(s), one for each line
          .data-field:synonyms
          value:x:/../*/_arg?value
        label
          innerValue:Hyperlambda to asociate with phrase(s)
          style:"margin-bottom:0;"
        hypereval.widgets.hyperlambda-textarea:hyper-input
          element:textarea
          .data-field:hyperlambda
          value:x:(/../*/hyperlambda|/@.defaults/*/hyperlambda)/$?value
        label
          title:Is this a global command, implying something you could tell Elizabeth at any time?
          style:"margin-bottom:0;"
          widgets
            input
              type:checkbox
              .data-field:global
              onchange

                /*
                 * Toggling "parent" label according to whether or not "Global" command
                 * checkbox is checked or not, since if it's checked, we don't insert
                 * any parent relationship.
                 *
                 * But first making sure widget actually exists.
                 */
                if
                  fetch:x:/0/0?value
                    widget-exists:hyperlang-create-phrase-parent-label
                  get-widget-property:x:/../*/_event?value
                    checked
                  if:x:/@get-widget-property/*/*
                    set-widget-property:hyperlang-create-phrase-parent-label
                      visible:false
                  else
                    set-widget-property:hyperlang-create-phrase-parent-label
                      visible:true

            span
              innerValue:Global
        label
          title:Should this phrase only apply for you?
          style:"margin-bottom:0;"
          widgets
            input
              type:checkbox
              .data-field:private
              checked
            span
              innerValue:Private phrase
        literal:hyperlang-create-phrase-parent-label
          element:span
          style:"position:absolute;top:1rem;right:1rem;font-style:italic;color:#a0a0a0;"
          oninit

            /*
             * Checking if we have a position, and if so, displaying it's first
             * command, otherwise simply deleting widget entirely.
             */
            _pos:x:/../*/_pos?value
            if:x:/@_pos?value

              /*
               * Figuring out the first relevant phrase, and displaying it as
               * widget's innerValue.
               */
              hyperlang.language.get
              p5.mysql.connect:[hyperlang]
                p5.mysql.scalar:@"select command from phrases where commandid in (select id from commands where id = @id) and (lang = @lang or lang = @sublang) order by lastused, id limit 1"
                  @id:x:/@_pos?value
                  @lang:x:/@hyperlang.language.get/*/lang?value
                  @sublang:x:/@hyperlang.language.get/*/sublang?value
                set-widget-property:x:/../*/_event?value
                  innerValue:@"Parent: '{0}'"
                    :x:/@p5.mysql.scalar?value

            else

              /*
               * Simply deleting widget.
               */
              delete-widget:x:/../*/_event?value

        div
          class:right
          widgets
            div
              class:strip
              style:"display:inline-block;"
              widgets
                button
                  innerValue:OK
                  style:"margin-bottom:0;"
                  onclick

                    /*
                     * Making sure we wrap our insertion in a try catch block, in case
                     * user typed in "errors" in his command object.
                     */
                    try

                      /*
                       * Retrieving code from CodeMirror widget, and creating an
                       * association between phrase and code, before we close widget
                       * and restarts listening loop.
                       */
                      micro.form.serialize:hyperlang-create-phrase2hyper-association

                      /*
                       * Verifying user actually provided any Hyperlambda, and if not,
                       * we throw an exception.
                       */
                      if:x:/@micro.form.serialize/*/hyperlambda?value
                        =:
                        throw:No Hyperlambda was supplied

                      /*
                       * Connecting to database, and inserting into "commands" and "phrases",
                       * making sure we wrap our attempt inside a transaction, to avoid inserting
                       * "bad partial command objects".
                       */
                      p5.mysql.connect:[hyperlang]
                        p5.mysql.transaction.begin

                          /*
                           * Forward evaluated above.
                           */
                          _pos:x:/../*/_pos?value

                          /*
                           * Checking if this is a "private" command, at which point we
                           * insert it with the currently logged in user's username.
                           */
                          if:x:/@micro.form.serialize/*/private?value

                            /*
                             * Private command, checking if it's global.
                             */
                            whoami
                            if:x:/@micro.form.serialize/*/global?value

                              /*
                               * Global command, implying no "parent" relationship.
                               */
                              p5.types.guid.new
                              p5.mysql.insert:@"insert into commands (hyperlambda, username, global, global_id) values (@hyperlambda, @username, 1, @globalid)"
                                @hyperlambda:x:/@micro.form.serialize/*/hyperlambda?value
                                @username:x:/@whoami/*/username?value
                                @globalid:x:/@p5.types.guid.new?value.string

                            else

                              /*
                               * Not a global command, inserting also "parent"
                               */
                              p5.types.guid.new
                              p5.mysql.insert:@"insert into commands (hyperlambda, username, parent, global_id) values (@hyperlambda, @username, @parent, @globalid)"
                                @hyperlambda:x:/@micro.form.serialize/*/hyperlambda?value
                                @username:x:/@whoami/*/username?value
                                @parent:x:/@_pos?value
                                @globalid:x:/@p5.types.guid.new?value.string

                          else

                            /*
                             * Public command, checking if it's global.
                             */
                            if:x:/@micro.form.serialize/*/global?value

                              /*
                               * Global command, implying no "parent" relationship.
                               */
                              p5.types.guid.new
                              p5.mysql.insert:@"insert into commands (hyperlambda, global, global_id) values (@hyperlambda, 1, @globalid)"
                                @hyperlambda:x:/@micro.form.serialize/*/hyperlambda?value
                                @globalid:x:/@p5.types.guid.new?value.string

                            else

                              /*
                               * Not a global command, inserting also "parent"
                               */
                              p5.types.guid.new
                              p5.mysql.insert:@"insert into commands (hyperlambda, parent, global_id) values (@hyperlambda, @parent, @globalid)"
                                @hyperlambda:x:/@micro.form.serialize/*/hyperlambda?value
                                @parent:x:/@_pos?value
                                @globalid:x:/@p5.types.guid.new?value.string

                          /*
                           * Splitting synonyms, and inserting one 'phrase' for each.
                           *
                           * Defaulting language to user's configure language, and only overriding the language,
                           * if user explicitly chose to override it, with a ":".
                           */
                          hyperlang.language.get
                          split:x:/@micro.form.serialize/*/synonyms?value
                            =:"\r\n"
                          p5.types.date.now
                          for-each:x:/@split/*?name

                            /*
                             * Figuring out language currently iterated phrase is.
                             *
                             * Defaulting to "lang" for user.
                             */
                            _lang
                            split:x:/@_dp?value
                              =:":"
                            if:x:/@split/*?count
                              =:int:2

                              /*
                               * Explicit language declaration.
                               */
                              hyperlang._assume-language-exists:x:/@split/0?name
                              set:x:/@_lang?value
                                src:x:/@split/0?name

                            else-if:x:/@split/*?count
                              =:int:1

                              /*
                               * Using default language.
                               */
                              set:x:/@_lang?value
                                src:x:/@hyperlang.language.get/*/lang?value

                            else

                              /*
                               * "Syntax error" in phrase, more than one ":" was supplied.
                               */
                              throw:@"Oops, you can't use a "":"" in your phrase, except for declaring language to use"

                            /*
                             * Inserting currently iterated phrase.
                             */
                            p5.mysql.insert:@"insert into phrases (command, commandid, lang, lastused) values (@command, @commandid, @lang, @lastused)"
                              @command:x:/@split/0/-?name
                              @commandid:x:/..p5.mysql.connect/**/p5.mysql.insert/*/id/[0,1]?value
                              @lang:x:/@_lang?value
                              @lastused:x:/@p5.types.date.now?value

                          /*
                           * Success, committing transaction.
                           */
                          p5.mysql.transaction.commit

                        /*
                         * Closing modal widget, and restarting listening loop.
                         */
                        delete-widget:hyperlang-create-phrase2hyper-association

                        /*
                         * Restarting input loop.
                         */
                        hyperlang.restart:[OK]

                    catch

                      /*
                       * Oops, providing feedback to user.
                       */
                      micro.windows.info:x:/..catch/*/message?value
                        class:micro-windows-info warning

                button
                  innerValue:Cancel
                  style:"margin-bottom:0;"
                  onclick

                    /*
                     * Closing modal widget, and restarting listening loop.
                     */
                    delete-widget:hyperlang-create-phrase2hyper-association

                    /*
                     * Restarting input loop.
                     */
                    hyperlang.restart:[Talk to me]
